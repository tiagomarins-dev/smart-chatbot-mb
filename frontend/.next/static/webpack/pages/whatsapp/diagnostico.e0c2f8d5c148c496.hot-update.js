"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/whatsapp/diagnostico",{

/***/ "./src/api/whatsapp.ts":
/*!*****************************!*\
  !*** ./src/api/whatsapp.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   whatsappApi: function() { return /* binding */ whatsappApi; }\n/* harmony export */ });\n// API WhatsApp - sempre apontando para a porta 9029\nconst getApiBaseUrl = ()=>{\n    // Sempre apontar para localhost:9029, independente do ambiente\n    return \"http://localhost:9029/api/whatsapp\";\n};\nconst whatsappApi = {\n    /**\n   * Get WhatsApp connection status\n   */ getStatus: async ()=>{\n        try {\n            const apiUrl = getApiBaseUrl();\n            console.log(\"Fetching WhatsApp status from: \".concat(apiUrl, \"/status\"));\n            const response = await fetch(\"\".concat(apiUrl, \"/status\"));\n            const responseText = await response.text();\n            console.log(\"Status API raw response:\", responseText);\n            let json;\n            try {\n                json = JSON.parse(responseText);\n                console.log(\"Parsed WhatsApp status response:\", json);\n            } catch (parseError) {\n                console.error(\"Error parsing WhatsApp status response:\", parseError);\n                return {\n                    success: false,\n                    error: \"Erro ao processar resposta do status do WhatsApp\",\n                    statusCode: response.status\n                };\n            }\n            if (!response.ok) {\n                return {\n                    success: false,\n                    error: json.error || \"Erro ao buscar status do WhatsApp\",\n                    statusCode: response.status\n                };\n            }\n            // Extrair dados da resposta seguindo a estrutura do backend\n            // Nota: A API retorna diretamente {status, qrCode, phoneNumber} sem estar dentro de um campo \"data\"\n            const statusData = {\n                status: json.status || \"disconnected\",\n                authenticated: json.status === \"connected\",\n                phoneNumber: json.phoneNumber || null,\n                timestamp: json.timestamp || new Date().toISOString()\n            };\n            console.log(\"Extracted WhatsApp status data:\", statusData);\n            return {\n                success: true,\n                data: statusData,\n                statusCode: json.statusCode || 200\n            };\n        } catch (error) {\n            console.error(\"Error fetching WhatsApp status:\", error);\n            return {\n                success: false,\n                error: \"Erro ao buscar status do WhatsApp\",\n                statusCode: 500\n            };\n        }\n    },\n    /**\n   * Get QR code for authentication\n   */ getQRCode: async ()=>{\n        try {\n            const apiUrl = getApiBaseUrl();\n            const response = await fetch(\"\".concat(apiUrl, \"/qrcode\"));\n            const json = await response.json();\n            if (!response.ok) {\n                return {\n                    success: false,\n                    error: json.error || \"QR Code n\\xe3o dispon\\xedvel\",\n                    statusCode: response.status\n                };\n            }\n            return {\n                success: true,\n                data: json.data,\n                statusCode: json.statusCode\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: \"Erro ao buscar QR code\",\n                statusCode: 500\n            };\n        }\n    },\n    /**\n   * Connect to WhatsApp\n   */ connect: async ()=>{\n        try {\n            const apiUrl = getApiBaseUrl();\n            const response = await fetch(\"\".concat(apiUrl, \"/connect\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            const json = await response.json();\n            if (!response.ok) {\n                return {\n                    success: false,\n                    error: json.error || \"Erro ao conectar WhatsApp\",\n                    statusCode: response.status\n                };\n            }\n            return {\n                success: true,\n                data: json.data,\n                statusCode: json.statusCode\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: \"Erro ao conectar WhatsApp\",\n                statusCode: 500\n            };\n        }\n    },\n    /**\n   * Disconnect from WhatsApp\n   */ disconnect: async ()=>{\n        try {\n            const apiUrl = getApiBaseUrl();\n            const response = await fetch(\"\".concat(apiUrl, \"/disconnect\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            const json = await response.json();\n            if (!response.ok) {\n                return {\n                    success: false,\n                    error: json.error || \"Erro ao desconectar WhatsApp\",\n                    statusCode: response.status\n                };\n            }\n            return {\n                success: true,\n                data: json.data,\n                statusCode: json.statusCode\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: \"Erro ao desconectar WhatsApp\",\n                statusCode: 500\n            };\n        }\n    },\n    /**\n   * Send WhatsApp message\n   */ sendMessage: async (number, message, lead_id)=>{\n        try {\n            console.log(\"Sending WhatsApp message:\", {\n                number,\n                messageLength: message.length,\n                lead_id\n            });\n            const apiUrl = getApiBaseUrl();\n            console.log(\"Using API URL:\", apiUrl);\n            const payload = {\n                phoneNumber: number,\n                message,\n                lead_id\n            };\n            console.log(\"Message payload (truncated):\", {\n                ...payload,\n                message: message.length > 50 ? message.substring(0, 50) + \"...\" : message\n            });\n            console.log(\"Sending POST request to:\", \"\".concat(apiUrl, \"/send\"));\n            const response = await fetch(\"\".concat(apiUrl, \"/send\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(payload)\n            });\n            console.log(\"Response status:\", response.status);\n            // Get response data\n            let data;\n            const responseText = await response.text();\n            console.log(\"Response text:\", responseText);\n            try {\n                data = JSON.parse(responseText);\n                console.log(\"Parsed response data:\", data);\n            } catch (parseError) {\n                console.error(\"Error parsing response JSON:\", parseError);\n                return {\n                    success: false,\n                    error: \"Invalid JSON response: \".concat(responseText.substring(0, 100)),\n                    statusCode: response.status\n                };\n            }\n            if (!response.ok) {\n                console.error(\"Request failed:\", data);\n                return {\n                    success: false,\n                    error: data.error || \"Erro ao enviar mensagem (\".concat(response.status, \")\"),\n                    statusCode: response.status\n                };\n            }\n            return {\n                success: true,\n                data: data.data || data,\n                statusCode: response.status\n            };\n        } catch (error) {\n            console.error(\"Exception in sendMessage:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? \"Erro: \".concat(error.message) : \"Erro ao enviar mensagem\",\n                statusCode: 500\n            };\n        }\n    },\n    /**\n   * Get all messages from all contacts\n   */ getMessages: async ()=>{\n        try {\n            const apiUrl = getApiBaseUrl();\n            const response = await fetch(\"\".concat(apiUrl, \"/messages\"));\n            if (!response.ok) {\n                return {\n                    success: false,\n                    error: \"Erro ao buscar mensagens\",\n                    statusCode: response.status\n                };\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data,\n                statusCode: 200\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: \"Erro ao buscar mensagens\",\n                statusCode: 500\n            };\n        }\n    },\n    /**\n   * Get messages from a specific contact\n   */ getContactMessages: async (number)=>{\n        try {\n            const apiUrl = getApiBaseUrl();\n            const response = await fetch(\"\".concat(apiUrl, \"/messages/\").concat(number));\n            if (!response.ok) {\n                return {\n                    success: false,\n                    error: \"Erro ao buscar mensagens do contato\",\n                    statusCode: response.status\n                };\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data,\n                statusCode: 200\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: \"Erro ao buscar mensagens do contato\",\n                statusCode: 500\n            };\n        }\n    },\n    /**\n   * Clear all messages\n   */ clearMessages: async ()=>{\n        try {\n            const apiUrl = getApiBaseUrl();\n            const response = await fetch(\"\".concat(apiUrl, \"/messages\"), {\n                method: \"DELETE\"\n            });\n            if (!response.ok) {\n                return {\n                    success: false,\n                    error: \"Erro ao limpar mensagens\",\n                    statusCode: response.status\n                };\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data,\n                statusCode: 200\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: \"Erro ao limpar mensagens\",\n                statusCode: 500\n            };\n        }\n    },\n    /**\n   * Get QR code in plain text format\n   */ getQRCodePlain: async ()=>{\n        try {\n            const apiUrl = getApiBaseUrl();\n            const response = await fetch(\"\".concat(apiUrl, \"/qrcode/plain\"));\n            if (!response.ok) {\n                return {\n                    success: false,\n                    error: \"QR Code n\\xe3o dispon\\xedvel em formato de texto\",\n                    statusCode: response.status\n                };\n            }\n            const text = await response.text();\n            return {\n                success: true,\n                data: text,\n                statusCode: 200\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: \"Erro ao buscar QR code em texto\",\n                statusCode: 500\n            };\n        }\n    },\n    /**\n   * Get connected phone number\n   */ getPhone: async ()=>{\n        try {\n            const apiUrl = getApiBaseUrl();\n            const response = await fetch(\"\".concat(apiUrl, \"/phone\"));\n            if (!response.ok) {\n                return {\n                    success: false,\n                    error: \"Telefone n\\xe3o dispon\\xedvel ou desconectado\",\n                    statusCode: response.status\n                };\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data,\n                statusCode: 200\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: \"Erro ao buscar telefone\",\n                statusCode: 500\n            };\n        }\n    },\n    /**\n   * Mock authenticate (for testing without scanning QR)\n   */ mockAuthenticate: async ()=>{\n        try {\n            const apiUrl = getApiBaseUrl();\n            const response = await fetch(\"\".concat(apiUrl, \"/mock/authenticate\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (!response.ok) {\n                return {\n                    success: false,\n                    error: \"Erro ao simular autentica\\xe7\\xe3o\",\n                    statusCode: response.status\n                };\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data.data,\n                statusCode: 200\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: \"Erro ao simular autentica\\xe7\\xe3o\",\n                statusCode: 500\n            };\n        }\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (whatsappApi);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/api/whatsapp.ts\n"));

/***/ })

});